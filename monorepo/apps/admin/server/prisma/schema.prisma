// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seat {
  id        Int      @id @default(autoincrement())
  routeId   Int
  number    Int
  status    String   @default("available") // available, booked, reserved
  route     Route    @relation(fields: [routeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([routeId, number])
}

model Route {
  id              Int      @id @default(autoincrement())
  vendorId        Int
  departure       String
  destination     String
  departureTime   DateTime
  estimatedArrival DateTime?
  fare           Int
  capacity       Int      @default(44)
  status         String   @default("active")
  daysOfWeek     String[]
  kilometers     Int
  stops          String[]
  vendor         Vendor   @relation(fields: [vendorId], references: [id])
  seats          Seat[]
  tickets        Ticket[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Vendor {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String?
  status    String   @default("active")
  routes    Route[]
  tickets   Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id               Int      @id @default(autoincrement())
  routeId          Int
  vendorId         Int
  customerName     String
  customerPhone    String
  customerEmail    String?
  seatNumber       Int
  amount           Int
  status           String   @default("pending")
  bookingReference String   @unique
  travelDate       DateTime
  route            Route    @relation(fields: [routeId], references: [id])
  vendor           Vendor   @relation(fields: [vendorId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  routeId   Int
  vendorId  Int
  ticketId  Int
  rating    Int      // 1-5
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 